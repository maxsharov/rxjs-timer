{"version":3,"sources":["Timer/Timer.js","App.js","index.js"],"names":["Timer","props","useState","hours","setHours","minutes","setMinutes","seconds","setSeconds","useEffect","Math","floor","timePassed","toString","length","App","timer","setTimer","diff","setDiff","subscription","setSubscription","prevent","setPrevent","className","onClick","unsubscribe","timerSubscription","interval","pipe","map","v","subscribe","event","timerInstance","setTimeout","clearTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NA2BeA,EAzBD,SAACC,GAAW,IAAD,EACGC,mBAAS,GADZ,mBAChBC,EADgB,KACTC,EADS,OAEOF,mBAAS,GAFhB,mBAEhBG,EAFgB,KAEPC,EAFO,OAGOJ,mBAAS,GAHhB,mBAGhBK,EAHgB,KAGPC,EAHO,KAgBvB,OAXAC,qBAAU,WACR,IAAIN,EAAQO,KAAKC,MAAMV,EAAMW,WAAa,MAC1CR,GAAS,kBAAmC,IAA5BD,EAAMU,WAAWC,OAAe,IAAM,IAAMX,KAE5D,IAAIE,EAAUK,KAAKC,MAAOV,EAAMW,WAAa,KAAQ,IACrDN,GAAW,kBAAqC,IAA9BD,EAAQQ,WAAWC,OAAe,IAAM,IAAMT,KAEhE,IAAIE,EAAUN,EAAMW,WAAa,GACjCJ,GAAW,kBAAqC,IAA9BD,EAAQM,WAAWC,OAAe,IAAM,IAAMP,OAC/D,CAACN,EAAMW,aAGR,mCACE,+BACGT,EADH,IACWE,EADX,IACqBE,Q,sBC2DZQ,MAvEf,WAAgB,IAAD,EACab,mBAAS,GADtB,mBACNc,EADM,KACCC,EADD,OAEWf,mBAAS,GAFpB,mBAENgB,EAFM,KAEAC,EAFA,OAI2BjB,mBAAS,IAJpC,mBAINkB,EAJM,KAIQC,EAJR,OAKiBnB,oBAAS,GAL1B,mBAKNoB,EALM,KAKGC,EALH,KAmDb,OACE,sBAAKC,UAAU,MAAf,UACE,4CACA,uBACA,cAAC,EAAD,CAAOZ,WAAYI,GAAgBE,IACnC,gCACE,wBAAQO,QAlDS,WACrB,GAAKL,EAQHA,EAAaM,cACbT,EAAS,GACTE,EAAQ,GACRE,EAAgB,QAXC,CACjB,IAAMM,EAAoBC,YAXlB,KAYLC,KAAKC,aAAI,SAACC,GAAD,OAAOA,EAAI,MACpBC,WAAU,SAACD,GACVd,EAASc,EAAIb,MAEjBG,EAAgBM,KA2CmBH,UAAU,kBAA3C,wBAGA,wBAAQC,QArCQ,SAACQ,GACrB,GAAIX,EAAS,CACXC,GAAW,GACX,IAAMW,EAAgBC,YAAW,WAC/BZ,GAAW,GACXa,aAAaF,KACZ,UAECd,GACFA,EAAaM,cAGfP,EAAQH,GACRK,EAAgB,KAwBkBG,UAAU,kBAA1C,kBAGA,wBAAQC,QAvBS,WACjBL,GACFA,EAAaM,cAGf,IAAMC,EAAoBC,YA/ChB,KA+CgCI,WAAU,SAACD,GACnDd,EAASc,MAEXV,EAAgBM,IAeqBH,UAAU,iBAA3C,0BCnERa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e26661f4.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst Timer = (props) => {\r\n  const [hours, setHours] = useState(0);\r\n  const [minutes, setMinutes] = useState(0);\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    let hours = Math.floor(props.timePassed / 3600);\r\n    setHours(() => (hours.toString().length === 1 ? \"0\" : \"\") + hours);\r\n\r\n    let minutes = Math.floor((props.timePassed % 3600) / 60);\r\n    setMinutes(() => (minutes.toString().length === 1 ? \"0\" : \"\") + minutes);\r\n\r\n    let seconds = props.timePassed % 60;\r\n    setSeconds(() => (seconds.toString().length === 1 ? \"0\" : \"\") + seconds);\r\n  }, [props.timePassed]);\r\n\r\n  return (\r\n    <>\r\n      <h3>\r\n        {hours}:{minutes}:{seconds}\r\n      </h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import { useState } from \"react\";\nimport Timer from \"./Timer/Timer\";\n\nimport { interval } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport \"./App.css\";\n\nconst delay = 1000;\n\nfunction App() {\n  const [timer, setTimer] = useState(0);\n  const [diff, setDiff] = useState(0);\n\n  const [subscription, setSubscription] = useState(\"\");\n  const [prevent, setPrevent] = useState(true);\n\n  const onStartHandler = () => {\n    if (!subscription) {\n      const timerSubscription = interval(delay)\n        .pipe(map((v) => v + 1))\n        .subscribe((v) => {\n          setTimer(v + diff);\n        });\n      setSubscription(timerSubscription);\n    } else {\n      subscription.unsubscribe();\n      setTimer(0);\n      setDiff(0);\n      setSubscription(\"\");\n    }\n  };\n\n  const onWaitHandler = (event) => {\n    if (prevent) {\n      setPrevent(false);\n      const timerInstance = setTimeout(function () {\n        setPrevent(true);\n        clearTimeout(timerInstance);\n      }, 300);\n    } else {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n\n      setDiff(timer);\n      setSubscription(\"\");\n    }\n  };\n\n  const onResetHandler = () => {\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n\n    const timerSubscription = interval(delay).subscribe((v) => {\n      setTimer(v);\n    });\n    setSubscription(timerSubscription);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>RxJS Timer</h1>\n      <hr />\n      <Timer timePassed={timer ? timer : diff} />\n      <div>\n        <button onClick={onStartHandler} className=\"btn btn-success\">\n          Start/Stop\n        </button>\n        <button onClick={onWaitHandler} className=\"btn btn-warning\">\n          Wait\n        </button>\n        <button onClick={onResetHandler} className=\"btn btn-danger\">\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}